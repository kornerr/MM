import Net

extension Login.Core {
  public struct Model {
    public struct Buttons {
      public var isSignInPressed = false
    }

    public var buttons = Buttons()
    public var host = ""
    public var password = ""
    public var systemInfo: Net.SystemInfo?
    public var username = ""
  }
}

extension Login.Core.Model {
  // –°—Ç–æ–∏—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞.
  public var shouldResetHostName: String {
    guard let si = systemInfo else { return "üéÉ Murk in Models üéÉ" }
    return si.domain.name
  }

  // –°—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ –∞–¥—Ä–µ—Å—É —Ö–æ—Å—Ç–∞.
  public var shouldRefreshSystemInfo: URL? {
    guard !host.isEmpty else { return nil }
    let urlString = "http://\(host)/systemInfo"
    return URL(string: urlString)
  }

  // –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è host –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ –∫—Ä–∞—è–º –ø—Ä–æ–±–µ–ª—ã.
  public var shouldResetHost: String? {
    let th = host.trimmingCharacters(in: .whitespaces)
    if th != host {
      return th
    }
    return nil
  }

  // –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è password –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ –∫—Ä–∞—è–º –ø—Ä–æ–±–µ–ª—ã.
  public var shouldResetPassword: String? {
    let tp = password.trimmingCharacters(in: .whitespaces)
    if tp != password {
      return tp
    }
    return nil
  }

  // –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è username –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ –∫—Ä–∞—è–º –ø—Ä–æ–±–µ–ª—ã.
  public var shouldResetUsername: String? {
    let tu = username.trimmingCharacters(in: .whitespaces)
    if tu != username {
      return tu
    }
    return nil
  }
}
